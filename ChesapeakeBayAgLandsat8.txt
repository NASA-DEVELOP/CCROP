//2017 Spring GSFC Chesapeake Bay Agriculture
//NASA DEVELOP | Goddard Space Flight Center
//Script Primary Author: Alison Thieme, alisonthieme@gmail.com
//Team Members: John Fitz, Sean McCartney, Perry Oddo, Alison Thieme, Sunita Yadav (Team Leader)
//Most Recent Update: April 10, 2018
//
//This script is designed to extract Landsat 8 Surface Reflectance NDVI averages from field boundaries 
//and export the values as a table.  The date of the image is found in the header of the table and the
//NDVI averages as as the cells in the column corresponding to the date.  Here CLUID is used as the 
//unique identifier for each field. 
//
//Complete top section in order to adjust script for fields and year as needed.  
//___________________________________________________________________________________________________________

//Run python script using ArcMap to buffer field polygons 15m and separate into 4 shapefiles based on county
//Upload shapefiles as Fusion Table or as a table Asset in Google Earth Engine. 
//Shapefiles must be in WGS 1984 as projection

//Import these Fusion Table containing buffered field data for one year
//Below are the variables for 2014-2015 fields in 4 counties:
//Queen Annes County and Talbot Counties are combined into one region.
//replace XXXXX with Fusion Table ID or import from Assets and name var region
//var region = ee.FeatureCollection('ft:XXXXXXXXX', 'geometry'); //buffered field boundaries

//To add a different fusion table, change the ID found after ft: to the one matching your fusion table 
//ID found under File>About This Table

//Specify year when Winter Cover Crop planting took place
//Landsat 8 imagery is available from 2013 onward.
var year = ee.Number(2014);

//When steps above are completed click Run.
//When completed, under Console tab, select location to output data and hit Run.
//This should appear as Winter (December 15-January 31) and Spring (March 1-April 15) tables.

//___________________________________________________________________________________________________________


//******************************DROP HTML DESCRIPTION FIELD***************************************
region = region.map(
  function(feature) { 
    return feature.select(['CLUID']);
  });
  
print('Field Boundaries', region.first());

//******************************CREATE DATE RANGES BASED ON YEAR INPUT ABOVE**********************
var start_date = ee.Date.fromYMD(year, 1, 1)
var advanceyear = start_date.advance(1, 'year');
var nextyear = advanceyear.get('year');
var start_Winter = ee.Date.fromYMD(year, 12, 15);
var end_Winter = ee.Date.fromYMD(nextyear, 1, 31);
var start_Spring = ee.Date.fromYMD(nextyear, 3, 1);
var end_Spring = ee.Date.fromYMD(nextyear, 4, 15);

//******************************IMPORT LANDSAT 8 SURFACE REFLECTANCE COLLECTION*******************
// Load a Landsat 8 ImageCollection for a single path-row for Winter
var Wcollection = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
    .filterBounds(region)
    .filterDate(start_Winter, end_Winter);
print('Collection: ', Wcollection);

// Load a Landsat 8 ImageCollection for a single path-row for Spring
var Scollection = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
    .filterBounds(region)
    .filterDate(start_Spring, end_Spring);
print('Collection: ', Scollection);

Map.addLayer(Wcollection.filterBounds(region), 
  {'bands': ['B4', 'B3', 'B2'], 'min': 1000, 'max': 9500}, 'LS8');

//******************************ADD DATE**********************************************************
var addDate = function(image) {
  var date = ee.Date(image.get('system:time_start'));
  var dateString = date.format('YYYY-MM-dd');
  return image.set('date', dateString);
};

var W_dated = Wcollection.map(addDate);
var S_dated = Scollection.map(addDate);

//******************************CLOUD MASKING*****************************************************
function maskCloud(img) {
  //var cloud = img.select('cfmask').eq(0);
  var clear = img.select('pixel_qa').bitwiseAnd(2).neq(0);
  //clear = clear.updateMask(clear);
  return img.updateMask(clear);}
            

var W_cloudmasked = Wcollection.map(maskCloud);
var S_cloudmasked = Scollection.map(maskCloud);

//******************************FUNCTION TO GET NDVI FROM IMAGE***********************************
var LS8_getNDVI = function(image) {
  return image.addBands(image.normalizedDifference(['B5', 'B4']));
};

var NDVI_W = W_cloudmasked.map(LS8_getNDVI);
var NDVI_S = S_cloudmasked.map(LS8_getNDVI);

Map.setCenter(-76.575367, 39.393800, 8);
Map.addLayer(NDVI_S, {bands: ['nd'], palette: '000000, 00FF00', min: 0, max: 0.7}, 'NDVI');

//******************************RENAME NDVI TO DATE***********************************************
NDVI_W = NDVI_W.map(function(i) {
  return ee.Image(i)
    .select(['nd'],[ee.Date(ee.Image(i).get('system:time_start')).format('YYYY-MM-dd')])});
    
NDVI_S = NDVI_S.map(function(i) {
  return ee.Image(i)
    .select(['nd'],[ee.Date(ee.Image(i).get('system:time_start')).format('YYYY-MM-dd')])});

//******************************EXTRACT MEAN NDVI FOR ALL FIELDS**********************************
var stack = function (i1, i2) {
  return ee.Image(i2).addBands(ee.Image(i1));
};

var W_STACK = NDVI_W.iterate(stack, ee.Image());
var S_STACK = NDVI_S.iterate(stack, ee.Image());

var ww = function(feature) {
  return feature.set(ee.Image(W_STACK)
    .slice(1)
    .reduceRegion({
      reducer: 'mean',
      geometry: feature.geometry(),
      scale: 30,
      maxPixels: 1e9
    }).map(function(key, value) { 
      return ee.Algorithms.If(value, value, 0) 
    }))
}

var Wresults = region.map(ww);
print('WResults', Wresults.limit(10));

var ss = function(feature) {
  return feature.set(ee.Image(S_STACK)
    .slice(1)
    .reduceRegion({
      reducer: 'mean',
      geometry: feature.geometry(),
      scale: 30,
      maxPixels: 1e9
    }).map(function(key, value) { 
      return ee.Algorithms.If(value, value, 0) 
    }))
}

var Sresults = region.map(ss);
print('SResults', Sresults.limit(10));

//******************************EXPORT AS CSV******************************************************
Export.table.toDrive({
  collection: Wresults,
  description: 'Winter_NDVI',
  fileNamePrefix: 'Winter_NDVI',
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: Sresults,
  description: 'Spring_NDVI',
  fileNamePrefix: 'Spring_NDVI',
  fileFormat: 'CSV'
});
